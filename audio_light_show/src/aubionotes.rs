use std::fs::File;
use std::io::{self, BufRead};
use std::path::Path;

use crate::NoteTime;

#[derive(Debug)]
pub struct LoadErr;

/// The file needs to be generated by the `aubiopitch` utility.
pub fn parse_file<P>(filename: P) -> Result<Vec<NoteTime>, LoadErr>
where
    P: AsRef<Path>,
{
    if let Ok(lines) = read_lines(filename) {
        let mut out = vec![];
        for line in lines {
            if let Ok(l) = line {
                if let Ok(tf) = parse(&format!("{}", l)) {
                    out.push(tf);
                }
            }
        }
        Ok(out)
    } else {
        Err(LoadErr)
    }
}

struct ParseErr;
/// ignores single-value lines which indicate time
fn parse(line: &str) -> Result<NoteTime, ParseErr> {
    let spl: Vec<&str> = line.split_whitespace().collect();
    if spl.len() < 3 {
        Err(ParseErr)
    } else {
        let note_str = spl[0];
        let start_secs_str = spl[1];
        let stop_secs_str = spl[2];
        match (
            note_str.parse::<f32>(),
            start_secs_str.parse::<f32>(),
            stop_secs_str.parse::<f32>(),
        ) {
            (Ok(note), Ok(start_secs), Ok(stop_secs)) => Ok(NoteTime {
                note,
                start_secs,
                stop_secs,
            }),
            _ => Err(ParseErr),
        }
    }
}

// The output is wrapped in a Result to allow matching on errors
// Returns an Iterator to the Reader of the lines of the file.
fn read_lines<P>(filename: P) -> io::Result<io::Lines<io::BufReader<File>>>
where
    P: AsRef<Path>,
{
    let file = File::open(filename)?;
    Ok(io::BufReader::new(file).lines())
}
